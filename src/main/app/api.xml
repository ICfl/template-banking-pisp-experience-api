<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore" 
	xmlns:api-platform-gw="http://www.mulesoft.org/schema/mule/api-platform-gw"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation" 
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" 
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
	xmlns:http="http://www.mulesoft.org/schema/mule/http" 
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/api-platform-gw http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
    <flow name="get:/key:api-config">
        <logger level="INFO" doc:name="validate clientid and client_secret"/>
        <set-variable variableName="signingKey" value="#[java.util.UUID.randomUUID().toString()]" doc:name="generate OTP to var oneTimePassword"/>
        <set-variable variableName="paymentId" value="#[java.util.UUID.randomUUID().toString()]" doc:name="var paymentId"/>
        <dw:transform-message doc:name="build data to save">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	paymentId: flowVars.paymentId,
	client_id: inboundProperties."http.query.params".client_id,
	signingKey: flowVars.signingKey
}]]></dw:set-payload>
        </dw:transform-message>
        <objectstore:store config-ref="application_data" doc:name="store merchant one time data" key="#[payload.paymentId]" value-ref="#[payload]" overwrite="true"/>
        <dw:transform-message doc:name="response to merchant">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	paymentId: payload.paymentId,
	signingKey: payload.signingKey,
	expiresInSeconds: 300
}]]></dw:set-payload>
        </dw:transform-message>
</flow>

    <flow name="get:/initiate:api-config">
        <validation:all doc:name="validate query params">
            <validation:validations>
                <validation:is-true expression="#[message.inboundProperties.'http.query.params'.redirect_uri.startsWith(&quot;https&quot;)]" message="Redirect URI must be using HTTPS"/>
                <validation:is-url url="#[message.inboundProperties.'http.query.params'.redirect_uri]" message="Redirect URI must be valid URL"/>
            </validation:validations>
        </validation:all>
        <set-variable variableName="params" value="#[message.inboundProperties.'http.query.params']" doc:name="var params"/>
        <objectstore:contains config-ref="application_data" key="#[flowVars.params.paymentId]" doc:name="client data exists?"/>
        <choice doc:name="client registered and transaction known">
            <when expression="#[payload == true]">
                <flow-ref name="validatePaymentToken" doc:name="validatePaymentToken"/>
                <dw:transform-message doc:name="create updated paymentData object">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
flowVars.paymentData ++ {paymentClaims: flowVars.paymentTokenClaims}]]></dw:set-payload>
                </dw:transform-message>
                <objectstore:store config-ref="application_data" key="#[flowVars.params.paymentId]" value-ref="#[payload]" overwrite="true" doc:name="update paymentData with payment token"/>
                <dw:transform-message doc:name="Redirect to AS /authorize">
                    <dw:set-property propertyName="Location"><![CDATA[%dw 1.0
%output application/java
---
p('as.url') ++ '/authorize?' ++

([
 'client_id=' ++ p('pisp.client_id'),
 'response_type=token', 	
 'state=' ++ flowVars.params.paymentId,
 'redirect_uri=' ++ p('pisp.redirect_uri')
] joinBy '&')]]></dw:set-property>
                    <dw:set-property propertyName="http.status"><![CDATA[%dw 1.0
%output application/java
---
302]]></dw:set-property>
                </dw:transform-message>
                <set-payload value="#[NullPayload.getInstance()]" doc:name="Set Null Payload"/>
            </when>
            <otherwise>
                <parse-template location="html/error.html" doc:name="error page"/>
            </otherwise>
        </choice>

    </flow>
    <sub-flow name="validatePaymentToken">
        <objectstore:retrieve config-ref="application_data" key="#[flowVars.params.paymentId]" targetProperty="paymentData" doc:name="Get paymentData"/>
        <enricher source="#[payload]" target="#[flowVars.paymentTokenClaims]" doc:name="paymentTokenClaims">
            <scripting:transformer doc:name="validate Payment token">
                <scripting:script engine="Groovy"><![CDATA[import org.jose4j.jwt.JwtClaims;
import org.jose4j.jwt.consumer.JwtConsumer;
import org.jose4j.jwt.consumer.JwtConsumerBuilder;
import org.jose4j.keys.HmacKey;
import org.jose4j.jwa.AlgorithmConstraints;
import org.jose4j.jwa.AlgorithmConstraints.ConstraintType;
import java.security.Key;


Key key = new HmacKey(flowVars.paymentData.signingKey.getBytes("UTF-8"));

JwtConsumer jwtConsumer = new JwtConsumerBuilder()
			.setRequireExpirationTime()
			.setMaxFutureValidityInMinutes(5)
			.setJwsAlgorithmConstraints(new AlgorithmConstraints(ConstraintType.WHITELIST, "HS256"))
			.setExpectedAudience('https://anypointbank-pisp.cloudhub.io')
			.setVerificationKey(key)
			.build();
		
JwtClaims jwtClaims = jwtConsumer.processToClaims(flowVars.params.request);
return jwtClaims.getClaimsMap();]]></scripting:script>
            </scripting:transformer>
        </enricher>
    </sub-flow>

    
    <flow name="get:/consent:api-config">
        <logger message="get:/accounts query: #[message.inboundProperties.'http.query.string']" level="INFO" doc:name="Log request"/>
        <choice doc:name="params present?">
            <when expression="#[message.inboundProperties.Authorization != null]">
                <validation:all doc:name="Validate request">
                    <validation:validations>
                        <validation:is-not-empty value="#[message.inboundProperties.paymentId]" message="paymentId cannot be empty"/>
                        <validation:is-not-empty value="#[message.inboundProperties.Authorization]" message="Authorization header cannot be empty"/>
                        <validation:is-true expression="#[message.inboundProperties.Authorization.startsWith(&quot;Bearer &quot;)]" message="Authorization header must start with 'Bearer '"/>
                    </validation:validations>
                </validation:all>
                <set-variable variableName="paymentId" value="#[message.inboundProperties.paymentId]" doc:name="var paymentId"/>
                <set-variable variableName="access_token" value="#[message.inboundProperties.Authorization.substring(7)]" doc:name="set var access_token"/>
                <flow-ref name="validateAccessToken" doc:name="validateAccessToken"/>
                <objectstore:contains config-ref="application_data" key="#[flowVars.paymentId]" doc:name="contains payment?"/>
                <choice doc:name="Known payment?">
                    <when expression="#[payload == true]">
                        <objectstore:retrieve config-ref="application_data" key="#[flowVars.paymentId]" targetProperty="paymentData" doc:name="get payment data"/>
                        <http:request config-ref="accounts-process-api" path="/accounts/aggregate" method="GET" doc:name="get aggregated Accounts">
                            <http:request-builder>
                                <http:query-param paramName="ssn" value="#[flowVars.accessTokenClaims.ssn]"/>
                            </http:request-builder>
                        </http:request>
                        <dw:transform-message doc:name="filter response">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload filter $.type == "checking"
]]></dw:set-payload>
                        </dw:transform-message>
                        <parse-template location="html/consent.html" doc:name="merge consent page"/>
                    </when>
                    <otherwise>
                        <parse-template location="html/error.html" doc:name="error page"/>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <set-payload value="&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;&lt;/title&gt;

    &lt;script&gt;

      window.onload = function(){

        function QueryStringToJSON() {
            var pairs = location.hash.slice(1).split('&amp;');

            var result = {};
            pairs.forEach(function(pair) {
                pair = pair.split('=');
                result[pair[0]] = decodeURIComponent(pair[1] || '');
            });

            return JSON.parse(JSON.stringify(result));
        }

        var hash_string = QueryStringToJSON();


         var req = new XMLHttpRequest();
         req.onreadystatechange = function() {
           if (req.readyState === 4) {
              console.log(req.response);
              window.document.open();
              window.document.write(req.responseText);
              window.document.close();
           }
         };

         req.open(&quot;GET&quot;, &quot;http://localhost:8081/api/payment/consent&quot;, true);
         req.setRequestHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + hash_string.access_token);
         req.setRequestHeader(&quot;paymentId&quot;, hash_string.state);
         req.responseType = &quot;text&quot;;
         req.send();
       };
    &lt;/script&gt;

  &lt;/head&gt;
  &lt;body&gt;

  &lt;/body&gt;
&lt;/html&gt;
" mimeType="text/html" doc:name="JS redirect"/>
            </otherwise>
        </choice>
    </flow>
    <sub-flow name="validateAccessToken">
        <enricher source="#[payload]" target="#[flowVars.decryptionKeyString]" doc:name="var decryptionKeyString">
            <parse-template location="shared-key.jwk" doc:name="load AES key"/>
        </enricher>
        <enricher source="#[payload]" target="#[flowVars.accessTokenClaims]" doc:name="var accessTokenClaims">
            <scripting:transformer returnClass="java.util.Map" doc:name="Validate access_token">
                <scripting:script engine="Groovy"><![CDATA[import org.jose4j.jwt.JwtClaims;
import org.jose4j.keys.HmacKey;
import org.jose4j.keys.resolvers.HttpsJwksVerificationKeyResolver;
import org.jose4j.jwk.HttpsJwks;
import org.jose4j.jwk.JsonWebKey;
import org.jose4j.jwk.OctetSequenceJsonWebKey;
import org.jose4j.jwt.consumer.JwtConsumer;
import org.jose4j.jwt.consumer.JwtConsumerBuilder;
import org.jose4j.jwa.AlgorithmConstraints;
import org.jose4j.jwa.AlgorithmConstraints.ConstraintType;
import java.security.Key;

decryptionKey = (OctetSequenceJsonWebKey) JsonWebKey.Factory.newJwk(flowVars.decryptionKeyString);

HttpsJwksVerificationKeyResolver verificationKeys = new HttpsJwksVerificationKeyResolver(new HttpsJwks('${as.jwks.url}'));
    
JwtConsumer jwtConsumer = new JwtConsumerBuilder()
			.setRequireExpirationTime()
			.setJwsAlgorithmConstraints(new AlgorithmConstraints(ConstraintType.WHITELIST, "RS256"))
			.setJweAlgorithmConstraints(new AlgorithmConstraints(ConstraintType.WHITELIST, "dir"))
			.setMaxFutureValidityInMinutes(30*24*60)
			.setExpectedIssuer('${as.issuer}')
			.setVerificationKeyResolver(verificationKeys)
			.setDecryptionKey(decryptionKey.getKey())
			.build();
		
JwtClaims jwtClaims = jwtConsumer.processToClaims(flowVars.access_token);
return jwtClaims.getClaimsMap();]]></scripting:script>
            </scripting:transformer>
        </enricher>
    </sub-flow>

    <flow name="post:/processPayment:api-config">
        <set-variable variableName="formData" value="#[payload]" doc:name="save formData"/>
        <set-variable variableName="access_token" value="#[payload.access_token]" doc:name="set var access_token"/>
        <flow-ref name="validateAccessToken" doc:name="validateAccessToken"/>
        <objectstore:contains config-ref="application_data" key="#[flowVars.formData.paymentId]" doc:name="contains payment?"/>
        <choice doc:name="Known payment?">
            <when expression="#[payload == true]">
                <objectstore:retrieve config-ref="application_data" key="#[flowVars.formData.paymentId]" targetProperty="paymentData" doc:name="retrieve to  var paymentData"/>
                <objectstore:remove config-ref="application_data" key="#[flowVars.formData.paymentId]" ignoreNotExists="true" doc:name="invalidate payment data"/>
                <dw:transform-message doc:name="prepare request for sAPI">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
using (paymentInfo = flowVars.paymentData.paymentClaims.payment)
{
	amount: {
		amount: paymentInfo.amount.amount,
		currency: paymentInfo.amount.curr
	},
	description: paymentInfo.details.subject,
	label: paymentInfo.receiver.name,
	receiver_IBAN: paymentInfo.receiver.IBAN
 }]]></dw:set-payload>
                </dw:transform-message>
                <http:request config-ref="payments-process-api" path="/accounts/{id}/transactions" method="POST" doc:name="Payment">
                    <http:request-builder>
                        <http:uri-param paramName="id" value="#[flowVars.formData.account_id]"/>
                    </http:request-builder>
                </http:request>
                <json:json-to-object-transformer returnClass="java.util.Map" doc:name="JSON to Object"/>
                <scripting:transformer mimeType="application/java" doc:name="Sign the response">
                    <scripting:script engine="Groovy"><![CDATA[import org.jose4j.jwa.AlgorithmConstraints;
import org.jose4j.jwa.AlgorithmConstraints.ConstraintType;
import org.jose4j.jws.JsonWebSignature;
import org.jose4j.jwt.JwtClaims;
import java.security.Key;
import org.jose4j.keys.HmacKey;

Key key = new HmacKey(flowVars.paymentData.signingKey.getBytes("UTF-8"));


JwtClaims claims = new JwtClaims();
claims.setIssuer('${pisp.expected_audience}');  
claims.setAudience(flowVars.paymentData.paymentClaims.client_id); 
claims.setStringClaim("status", payload.status);
claims.setStringClaim("transactionId", payload.transaction_id);
claims.setStringClaim("paymentId", flowVars.paymentData.paymentId);
claims.setIssuedAtToNow();  

JsonWebSignature jws  = new JsonWebSignature();
jws.setAlgorithmHeaderValue('HS256');
jws.setPayload(claims.toJson());
jws.setKey(key);

return jws.getCompactSerialization();
]]></scripting:script>
                </scripting:transformer>
                <dw:transform-message doc:name="redirect to merchant">
                    <dw:set-property propertyName="http.status"><![CDATA[%dw 1.0
%output application/java
---
302]]></dw:set-property>
                    <dw:set-property propertyName="Location"><![CDATA[%dw 1.0
%output application/java
---
flowVars.paymentData.paymentClaims.redirect_uri ++ "?response=" ++ (payload as :string)]]></dw:set-property>
                </dw:transform-message>
                <set-payload value="#[NullPayload.getInstance()]" doc:name="empty the payload"/>
            </when>
            <otherwise>
                <parse-template location="error.html" doc:name="error page"/>
            </otherwise>
        </choice>
    </flow>

</mule>
